generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
  CHAIRMAN
}

model User {
  id             String           @id @default(cuid())
  firstName      String?
  lastName       String?
  username       String?          @unique
  phoneNumber    String?          @unique
  password       String?
  idNumber       String?          @unique
  bikeNumber     String?
  role           UserRole?        @default(USER)
  riderType      String[]
  chairman       String?
  image          String?
  points         Int?             @default(50)
  terms          Boolean?         @default(false)
  subscription   Boolean?         @default(false)
  ward           String?
  stage          String?
  comments       Comment[]
  stages         Stage[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  completedTasks TaskCompletion[] // Track which tasks have been completed by this user
  Account        Account[]

  @@map("users")
}

model Task {
  id           String   @id @default(cuid())
  thumbnailURL String?
  videoURL     String?
  completed    Boolean  @default(false)
  category     String?
  createdAt    DateTime @default(now())

  completions TaskCompletion[] // Track which users completed this task

  @@map("tasks")
}

model TaskCompletion {
  id        String   @id @default(cuid())
  userId    String
  taskId    String
  completed Boolean  @default(true) // Always true since this tracks completion
  createdAt DateTime @default(now())

  User User @relation(fields: [userId], references: [id])
  Task Task @relation(fields: [taskId], references: [id])

  @@unique([userId, taskId]) // Ensure each user can only complete a task once
}

model Post {
  id           String    @id @default(cuid())
  title        String
  category     String
  thumbnailURL String?
  videoURL     String
  comments     Comment[]
  content      String?
  createdAt    DateTime  @default(now())

  @@map("posts")
}

model UserPost {
  id           String   @id @default(cuid())
  title        String
  category     String
  thumbnailURL String?
  videoURL     String
  createdAt    DateTime @default(now())

  @@map("userposts")
}

model Stage {
  id         String   @id @default(cuid())
  stageName  String
  county     String
  sub_county String
  ward       String
  longitude  String
  latitude   String
  createdAt  DateTime @default(now())
  User       User?    @relation(fields: [userId], references: [id])
  userId     String?

  @@map("stages")
}

model Comment {
  id        String   @id @default(cuid())
  comment   String
  createdAt DateTime @default(now())
  postId    String?
  Post      Post?    @relation(fields: [postId], references: [id])
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?

  @@map("comments")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}
